You are a senior backend engineer. Please implement a production-ready Python module for my Flask backend, to be placed at backend/services/similar.py. This module should provide the logic and algorithms for generating "Similar Titles" recommendations for movies, TV shows, and anime.
Requirements:
1.	Story Similarity is the Main Factor:
‚Ä¢	The primary factor for similarity should be the story (plot/overview/description).
‚Ä¢	Use advanced NLP techniques (e.g., embeddings, semantic similarity, or LLMs if possible) to compare the story/overview fields of content.
‚Ä¢	The similarity score should be based on the semantic closeness of the story, not just keywords.
2.	Language and Title Accuracy:
‚Ä¢	Only recommend titles that match the original content's language exactly.
‚Ä¢	The recommended titles' names (title/original_title) must be 100% accurate and relevant‚Äîno mismatches or irrelevant results.
‚Ä¢	If possible, use fuzzy matching or normalization to ensure title accuracy.
3.	API and Integration:
‚Ä¢	The main function should be called from the Flask app (see /api/recommendations/similar/<int:content_id> in app.py).
‚Ä¢	The function should accept a content object (with fields like id, title, overview, content_type, languages, etc.) and return a list of similar content objects, each with a similarity score.
‚Ä¢	The logic should be encapsulated in a class or function, e.g., SimilarTitlesEngine.get_similar_titles(content, limit=8, min_similarity=0.7).
4.	Database Integration:
‚Ä¢	Use SQLAlchemy models as defined in app.py (Content, etc.).
‚Ä¢	Efficiently query the database for candidate titles (same language, same content_type, not the same id).
‚Ä¢	For performance, pre-filter by genre or popularity, but always rank by story similarity.
5.	Production-Ready Code:
‚Ä¢	The code should be modular, well-documented, and ready for production.
‚Ä¢	Include error handling, logging, and caching where appropriate.
‚Ä¢	If using external libraries (e.g., sentence-transformers, scikit-learn, spacy, or OpenAI/Claude APIs), show how to integrate them, but keep the code robust if the library is unavailable.
6.	Extensibility:
‚Ä¢	The module should be easy to extend for future improvements (e.g., adding more similarity factors, supporting multi-language, etc.).
7.	Testing:
‚Ä¢	Include a sample test function or usage example at the bottom of the file.
Reference:
See the /api/recommendations/similar/<int:content_id> endpoint in my backend/app.py for how this service will be called.





















Optimized Prompt for Claude AI
You are a senior backend architect working on a large-scale movie recommendation system.
Task: Implement a production-ready module in backend/services/similar.py for computing "Similar Titles" with the following constraints and goals:
________________________________________
‚úÖ Core Goals
‚Ä¢	The first priority is providing accurate and perfect similar titles based on the story content and language of the base content.
‚Ä¢	The title similarity should be 100% focused on the story and language ‚Äî ensure high semantic relevance, exact language match, and genre/theme alignment.
‚Ä¢	Results must feel like true narrative cousins, not just matches by tags or popularity.
________________________________________
‚öôÔ∏è Technical Constraints
‚Ä¢	All business logic and algorithms must exclusively live in backend/services/similar.py (modular, reusable, unit-testable).
‚Ä¢	The Flask route (/api/recommendations/similar/<content_id>) in backend/app.py should just call the service layer and return the results.
‚Ä¢	The system uses SQLAlchemy models (especially the Content model, which includes fields like genres, languages, overview, title, etc.)
‚Ä¢	The project uses JWT authentication, cache, ThreadPoolExecutor, and structured responses (JSON).
________________________________________
üìä Functional Expectations
‚Ä¢	Design a core class or service function such as SimilarContentService.get_similar(content_id) that:
‚Ä¢	Retrieves content from the database by ID
‚Ä¢	Extracts semantic relevance based on the story (overview)
‚Ä¢	Filters on exact matching languages
‚Ä¢	Uses advanced NLP techniques, like embedding-based similarity (e.g., using Sentence Transformers, TF-IDF cosine similarity, or universal sentence encoder)
‚Ä¢	Outputs a ranked list of titles with similarity_score, match_reason, and structured metadata
________________________________________
üß† Algorithms (Optional Guidance)
‚Ä¢	Use vector-based similarity using BERT / sentence embeddings
‚Ä¢	Calculate similarity based on:
‚Ä¢	Story/overview similarity
‚Ä¢	Title match (partial title match optional)
‚Ä¢	Language match (same original language or first in languages)
‚Ä¢	Optional: narrative tone, genre, and keywords
‚Ä¢	Use thresholds and softmax ranking or a weighted scoring model