provide the code for this with powerfull  and advanced recommendation system of backend and simple and of frontend and in frontend  provide the css code in a single line  
 i want to deploy the html code in the vercel and other in render so provide accordingly 
first provide the python files then provide the html files
ðŸŽ¬ Movie, Anime & Series Recommendation Website
when user click on movie he should get all details of the movie ratings, cast crew, triller, teasure ott platfrom  is it there for free to watch etc with watch links
when user get the suggestion or search movie it should look attractive and when he click on it there should a complete details about movie along with OTT platforms and watch links
   * User accounts (login, wishlist, favorites, watch history)
   * Fetching movie/anime/series data (TMDb, JustWatch)
   * Calling ML microservice for recommendations
   * Admin panel for posting suggestions on Website and Posting to Telegram channel
âœ… Frontend:
* HTML, CSS, and JavaScript
* Tailwind CSS for styling
* Bootstrap for responsive components
âœ… Backend:
* Python Flask server
* Handles:
   * when user get the suggestion or search movie it should look attractive and when he click on it there should a complete details about movie along with OTT platforms and watch links
   * User accounts (login, wishlist, favorites, watch history)
   * Fetching movie/anime/series data (TMDb, JustWatch)
   * Calling ML microservice for recommendations
   * Admin panel for posting suggestions on Website and Posting to Telegram channel
âœ… ML Microservice:
* Python Flask or FastAPI app
* Loads a trained recommendation model
* Provides personalized recommendations via API
âœ… Main Features:
* Personalized recommendations based on:
   * User watch history
   * Favorites
   * Wishlist
* Support for movies, anime, and series
* OTT platforms and watch links
* Admin-controlled featured suggestions
* 
âœ… Benefits:
* Simple and clean architecture
* Easy to build and extend
* Minimal frontend stack (HTML + CSS + JS)
* Powerful backend with Flask and Python ML
movie-recommendation-app/
â”œâ”€â”€ frontend/                   # Pure frontend (static files)
â”‚   â”œâ”€â”€ index.html              # Home page
â”‚   â”œâ”€â”€ recommendations.html    # Personalized recommendations page
â”‚   â”œâ”€â”€ wishlist.html           # Wishlist page
â”‚   â”œâ”€â”€ favorites.html          # Favorites page
â”‚   â”œâ”€â”€ admin.html              # Admin panel
â”‚   â”œâ”€â”€ css/
â”‚   â”‚   â””â”€â”€ styles.css          # Tailwind + Bootstrap
â”‚   â””â”€â”€ js/
â”‚       â””â”€â”€ app.js              # JavaScript (fetch data from backend)
â”‚
â”œâ”€â”€ backend/                    # Flask REST API
â”‚   â”œâ”€â”€ app.py                  # Main Flask app
â”‚   â”œâ”€â”€ requirements.txt        # Backend dependencies
â”‚   â””â”€â”€ .env                    # API keys, secrets
â”‚
â”œâ”€â”€ ml-service/                 # ML microservice
â”‚   â”œâ”€â”€ app.py                  # Flask or FastAPI app
â”‚   â””â”€â”€ requirements.txt        # ML dependencies
â”‚
â””â”€â”€ README.md                   # Project overview



 best for this and admin index of this 
there should be public-recommendations, genre_, based_recommendations,  get_trending_content, get_popular_content, get_top_rated_content for all the movies, anime and tv series

provide the better version of flask for this 

provide only chnages




provide the powerful, advanced version of recommendations of movies, anime, tv series
include multiple sophisticated algorithms, real-time learning, and intelligentRetryClaude can make mistakes. Please double-check responses that provide recommendation system that goes beyond the basic

public-recommendations for the home page
and when user login there should be personalized recommendations for this recommendations based on the user interests like
   * User watch history
   * interests
   * Favorites
   * Wishlist

admin can post his reommendations on wedsite and also in the telegram channel 
and admin can controll many things

when user click on the movie all the details like synopsis, triller teaser cast crew etc

for all the movies, anime and tv series

i wanted delpoy the frontend in vercel and backend/app.py and  ml-services/app.py on render 


according provide the changes only for this files only






Backend Prompt






Create a comprehensive movie and TV show recommendation system with the following requirements:

CORE FUNCTIONALITY:
- User authentication and session management
- Multi-source content discovery (movies, TV shows, anime)
- Advanced recommendation algorithms (collaborative filtering, content-based, hybrid, ML-powered)
- Real-time learning and preference adaptation
- Watchlist and rating system
- Admin panel for content management

HOMEPAGE RECOMMENDATION SYSTEM:
NON-LOGGED IN USERS:
- Custom recommendations based on anonymous browsing behavior
- Track user search history (stored in session/cookies)
- Generate recommendations based on searched genres and content types
- Show trending content and popular recommendations
- Display admin-curated public recommendations
- Track anonymous user interactions (clicks, views) for recommendation improvement
- Genre-based suggestions based on browsing patterns
- Popular content from different categories (action, comedy, drama, anime, etc.)

LOGGED IN USERS - PERSONALIZED RECOMMENDATIONS:
- Watch history-based recommendations (content user has viewed/completed)
- Favorites-based suggestions (similar content to user's favorites)
- Wishlist-inspired recommendations (content related to wishlist items)
- Favorite genres priority system (higher weight to preferred genres)
- User rating patterns analysis (recommend highly-rated similar content)
- Viewing time patterns (recommend content matching user's typical viewing schedule)
- Cross-content-type recommendations (movie fans get TV suggestions, etc.)
- Personalization score display showing how tailored recommendations are

DETAILED CONTENT PAGES:
- Complete movie/TV show/anime information display
- Synopsis/plot summary with spoiler controls
- Multiple trailers and teasers (official, fan-made, international)
- Full cast list with character names and actor photos
- Crew information (director, producer, writer, cinematographer, etc.)
- User ratings and professional critic scores
- High-quality poster gallery and promotional images
- Backdrop images and screenshot galleries
- Technical details (runtime, release date, budget, box office)
- Genre tags and content classifications
- Similar content recommendations
- User reviews and comments section
- Streaming availability information
- Awards and nominations
- Production company information
- Filming locations and trivia

RECOMMENDATION ALGORITHMS:
- Implement hybrid recommendation combining multiple approaches
- Collaborative filtering based on user similarity
- Content-based filtering using genre and metadata analysis
- ML service integration for deep learning recommendations
- Fallback strategies for new users and service failures
- Anonymous user recommendation engine using session data

ADMIN CONTENT CURATION SYSTEM:
- Admin dashboard to browse and search TMDB movie/TV database
- Admin interface to search Jikan anime database
- Admin can select specific movies/TV shows/anime from external APIs
- Admin can create custom public recommendations with selected content
- Admin can write personalized descriptions and reasons for recommendations
- Admin can set priority levels and expiration dates for recommendations
- Admin can tag recommendations with categories (trending, classic, hidden gems, etc.)
- System automatically fetches full metadata when admin selects content
- Admin recommendations appear in public feed and get shared via Telegram

REAL-TIME FEATURES:
- Background learning processes that update user preferences
- Session tracking and viewing behavior analysis
- Real-time ML model updates based on user interactions
- Personalization and diversity scoring
- Anonymous user behavior tracking for non-logged users

EXTERNAL INTEGRATIONS:
- TMDB API for movies and TV shows (admin browsing + user discovery + detailed metadata)
- Jikan API for anime content (admin browsing + user discovery + detailed metadata)
- Custom ML service for advanced recommendations
- Telegram bot for notifications and featured content
- YouTube API for trailer and teaser integration

DATABASE DESIGN:
- User management with admin roles
- Content caching with extensive metadata
- User interactions (ratings, watchlist, viewing sessions, favorites)
- Featured content and public recommendations system
- Admin-curated content with custom descriptions and metadata
- User preferences and viewing patterns
- Anonymous user session tracking
- Detailed content metadata storage

ADMIN FEATURES:
- Content browsing interface for TMDB/Jikan databases
- Search and filter capabilities for content selection
- Public recommendation creation with rich metadata
- User management and analytics
- System monitoring and health checks
- Telegram notifications for community engagement
- Content scheduling and expiration management

TECHNICAL REQUIREMENTS:
- Flask backend with SQLite database
- CORS support for frontend integration
- Error handling and logging
- Rate limiting and caching strategies
- Background task processing
- RESTful API design
- Admin authentication and authorization
- Session management for anonymous users

ADVANCED FEATURES:
- ML-powered search suggestions
- Trending content discovery
- Personalization scoring
- Diversity metrics for recommendations
- Enhanced content metadata and similarity
- Real-time preference learning
- Admin content curation workflow
- Public recommendation feed with admin-selected content
- Anonymous user recommendation engine
- Detailed content information system

USER EXPERIENCE FLOW:
ANONYMOUS USERS:
1. Visit homepage â†’ See trending and popular content
2. Search for content â†’ Track search patterns and genres
3. View content details â†’ Track interests and viewing behavior
4. Get recommendations based on browsing history
5. Option to register for personalized experience

LOGGED IN USERS:
1. Login â†’ Access personalized homepage
2. See recommendations based on watch history, favorites, wishlist
3. Rate content â†’ Improve future recommendations
4. Add to favorites/wishlist â†’ Enhance recommendation accuracy
5. View detailed content pages with full metadata
6. Get increasingly personalized suggestions over time

CONTENT DETAIL PAGES:
1. Display comprehensive information (synopsis, cast, crew, ratings)
2. Show multiple trailers and promotional videos
3. Present similar content recommendations
4. Allow user interactions (rating, wishlist, favorites)
5. Track user engagement for recommendation improvement