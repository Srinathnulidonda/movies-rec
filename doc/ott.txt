You are a world-class Python backend engineer who has worked at top global companies.
Now, build a production-ready OTT Availability Service inside backend/services/ott.py based on backend/app.py.
Objective
Create a robust service that automatically fetches and serves streaming availability for movies/TV shows across platforms, with full support for multi-language, free/paid distinction, and graceful fallbacks.
________________________________________
Functional Requirements
1.	Availability Information
o	Show on which platforms the movie is available (Netflix, Amazon Prime, Disney+, Hotstar, Hulu, YouTube, ETV Win, Aha, Jio Cinema, MX Player, etc.).
o	Include streaming, rental, and purchase options.
o	Explicitly show whether each option is Free, Subscription, or Pay-per-view.
2.	Direct Watch Links
o	Provide verified working deep-links to each platform.
o	List all sources clearly with platform names and official logos.
3.	Multi-Language Support
o	If the movie is available in multiple languages or dubbed versions, display separate watch links for each.
o	Example: RRR (2022) → Telugu, Hindi, Tamil, Kannada, Malayalam, English.
4.	User-Friendly Metadata
o	Each result should include:
	Platform logo + Language tag
	"Watch Now" button with deep link
	Resolution (SD/HD/4K)
	Subtitle availability
	Release year + Runtime
5.	Fallback Handling
o	If not available: display "Currently not available for streaming. Check back later."
o	Optionally fetch trailer link from YouTube and display.
6.	Free vs Paid
o	For each platform, explicitly show:
	Free
	Subscription (monthly/annual)
	Paid (rent/buy)
________________________________________
Data Sources & Methods
1.	API Integration
o	Use the Streaming Availability API via RapidAPI:
o	https://streaming-availability.p.rapidapi.com/shows/{type}/{id}
o	Headers:
o	  x-rapidapi-host: streaming-availability.p.rapidapi.com
o	  x-rapidapi-key: 6212e018b9mshb44a2716d211c51p1c493ejsn73408baa28be
o	Parse API response to extract:
	Platforms
	Languages/audio tracks
	Free vs Paid status
	Direct links
2.	Web Scraping (Fallback)
o	Scrape JustWatch, Reelgood, Flixwatch for availability if API does not return results.
o	Scrape Google Knowledge Graph (SERP “Watch Now” widget) if needed.