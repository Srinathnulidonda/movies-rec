
Endpoints
1. /recommendations/trending
   - Aggregate trending content from TMDB, OMDB, and Jikan.
   - Include movies, TV shows, and anime across all languages. Prioritize content in Telugu, English, Hindi, Tamil, Malayalam first, but include other languages as fallback.
   - Sort by a combined metric of popularity and recency (e.g., TMDB popularity_score, Jikan score, release date).
   - Remove duplicates (based on normalized title and type).
   
2. /recommendations/new-releases
   - Aggregate new releases from all APIs.
   - Include movies, TV shows, and anime.
   - **Prioritize content in Telugu, English, Hindi, Tamil, Malayalam first, but include other languages as fallback.
   - Sort by release_date descending, then by popularity.
   - Support optional type/language filters.
   
3. /recommendations/Popular-Movies
   - Aggregate top-rated content from all APIs.
   - Prioritize content in Telugu, English, Hindi, Tamil, Malayalam first, but include other languages as fallback.


Anime
‚Ä¢  Trending Anime ‚Üí /recommendations/trending?type=anime
‚Ä¢  New Anime Releases ‚Üí /recommendations/new-releases?type=anime
‚Ä¢  Top Rated Anime ‚Üí /recommendations/critics-choice?type=anime
‚Ä¢  Anime by Genre ‚Üí multiple carousels like:
‚Ä¢	Action Anime
‚Ä¢	Romance Anime
‚Ä¢	Comedy Anime
‚Ä¢	Fantasy / Isekai Anime
(API filter: /content/genre?type=anime&genre={genre})
________________________________________
üé¨ Movies
‚Ä¢	Trending Movies ‚Üí /recommendations/trending?type=movie
‚Ä¢	New Movie Releases ‚Üí /recommendations/new-releases?type=movie
‚Ä¢	Top Rated Movies ‚Üí /recommendations/critics-choice?type=movie
‚Ä¢	Movies by Genre ‚Üí multiple carousels like:
o	Action Movies ‚Üí /content/genre?type=movie&genre=Action
o	Romance Movies ‚Üí /content/genre?type=movie&genre=Romance
o	Comedy Movies ‚Üí /content/genre?type=movie&genre=Comedy
o	Thriller Movies ‚Üí /content/genre?type=movie&genre=Thriller
o	(API filter: /content/genre?type=movies &genre={genre})
________________________________________
üì∫ TV Shows
‚Ä¢	Trending TV Shows ‚Üí /recommendations/trending?type=tv
‚Ä¢	New TV Show Releases ‚Üí /recommendations/new-releases?type=tv
‚Ä¢	Top Rated TV Shows ‚Üí /recommendations/critics-choice?type=tv
‚Ä¢	TV Shows by Genre ‚Üí multiple carousels like:
o	Drama TV Shows ‚Üí /content/genre?type=tv&genre=Drama
o	Mystery TV Shows ‚Üí /content/genre?type=tv&genre=Mystery
o	Sitcoms / Comedy ‚Üí /content/genre?type=tv&genre=Comedy
o	Sci-Fi / Fantasy TV ‚Üí /content/genre?type=tv&genre=Sci-Fi
o	(API filter: /content/genre?type=tv-show&genre={genre})

The exact specifications needed for 100% accurate implementation. It includes:
Precise API endpoints and data structures
Exact scoring algorithms and formulas
Specific language prioritization logic
Detailed error handling and caching requirements
Complete duplicate removal algorithm
Performance benchmarks and validation rules
Comprehensive testing checklist



separate search from my backend/app.py and provide this in backend/search.py and implement a powerful, super-fast search system using pure Python. 
Ensure the search results are 100% accurate and instant by using:
1. N-gram analyzer for partial matching and auto-complete.
2. Fuzzy search to handle typos and misspellings.
3. Field boosting to prioritize titles, genres, and keywords.
4. Optimized queries for speed and accuracy.
5. Pagination and sorting by relevance.
6. No defaults or placeholders ‚Äì only complete realtime data should be used from the actual database.

Return the complete best version of search.py that defines search functions that can be used directly inside app.py.












You are a senior backend engineer. Implement the ‚Äúnew-releases‚Äù feature for my backend using Python. Modify backend/app.py and create backend/services/new_releases.py to provide a production-grade, region- and timezone-aware endpoint that returns the latest releases for Movies, TV/Series, and Anime, following the rules below.
Context and constraints
‚Ä¢	Language priority (strict order): ['telugu', 'english', 'hindi', 'malayalam', 'kannada', 'tamil']
‚Ä¢	Use these ISO-639-1 codes: telugu=te, english=en, hindi=hi, malayalam=ml, kannada=kn, tamil=ta
‚Ä¢	Categories:
‚Ä¢	Movies: release_date in current month, then remaining 2 months
‚Ä¢	TV/Series: first_air_date in current month, then remaining 2 months
‚Ä¢	Anime: airing_start/first_air_date in current month, then remaining 2 months
‚Ä¢	Rules:
‚Ä¢	Limit to current year only
‚Ä¢	Region-aware release dates
‚Ä¢	Sort by date (newest first), then by popularity/vote_count; then apply language priority as a tiebreaker
‚Ä¢	Refresh at least daily (prefer hourly)
‚Ä¢	Apply the language priority ordering strictly
‚Ä¢	Timezone: user‚Äôs timezone aware (use tz name, not just offset)
‚Ä¢	Region: user‚Äôs region aware (ISO 3166-1 alpha-2, e.g., IN, US)
‚Ä¢	If repository/framework detection is ambiguous, default to FastAPI, httpx (async), and Redis for caching. Write framework-agnostic core logic in services and a thin integration layer in app.py.
Data sources (default choices if not otherwise present in repo)
‚Ä¢	Movies and TV: TMDb API
‚Ä¢	Use Discover endpoints with region-aware filters
‚Ä¢	Movies: /discover/movie with params
‚Ä¢	region={REGION}, primary_release_year={YEAR}, primary_release_date.gte, primary_release_date.lte
‚Ä¢	with_release_type=2|3|4|5 (theatrical, digital, physical, TV)
‚Ä¢	TV: /discover/tv with params
‚Ä¢	first_air_date_year={YEAR}, first_air_date.gte, first_air_date.lte
‚Ä¢	watch_region={REGION} (influences availability), but expect first_air_date to be global
‚Ä¢	Use popularity and vote_count fields for secondary sorting
‚Ä¢	Anime: AniList GraphQL
‚Ä¢	Filter Media by startDate year==current year
‚Ä¢	Select TV, TV_SHORT, ONA, OVA, and MOVIE formats
‚Ä¢	Filter items whose startDate or nextAiringEpisode.airingAt date falls within each target month range (see algorithm)
‚Ä¢	Use popularity and favourites/averageScore as sorting tie-breakers











1.	In backend/services/personalized.py, build a personalized recommendation engine for movies, anime, TV shows, and series using UserActivity (watch history, completion rate, dwell time), UserPreferences (preferred_genres, preferred_languages, content_types), search history, and story similarity (plot/description embeddings).
2.	Use Neural Collaborative Filtering (90% traffic) as the primary engine, with Matrix Factorization (10% fallback), and integrate ANN retrieval + Redis for fast candidate serving.
3.	Implement story embedding similarity using transformer/NLP encoders to match user-watched plots with similar items, combining it with NCF/MF in a hybrid ranking pipeline that enforces hard filters for language & content type.
4.	Continuously improve via online learning (mini-batches), multi-armed bandit (exploring NCF, MF, story-similarity, trending), and real-time A/B testing to evolve recommendations with user behavior.
5.	Ensure recommendations are context-aware, diverse, and real-time, returning each item with scores, reasons (e.g., "story match: Inception", "pref: Action"), and experiment ID for observability.




according to the above backend/app.py file
provide the best promt for my promt for the claude ai

MY PROMT

You are a senior backend architect working on a large-scale movie recommendation system. Implement a production-ready code that
- the Similar Titles should be first priority that the content lanugage and the similar title should be the 100% accurate 
   and 100% perfect tiltle 
- all the logics and alogithms should be in backend/services/similar.py file so develop this with the best production-level code
- the similar titles engine with 100% accurate story matching capabilities
- 100% accurate the similar story matching  should be there
- use the nltk, scikit-learn and joblib that support render free tier


remove the ml-services urls from this users.py 
instead of url create and folder backend/ml-services 
in that folder create algorithm.py and recommendation.py files which functionality is to based on the users search history,view, like, favorite, watchlist, rating should be keep traking based on that the personalized recommendations should be provided use the best approches to provide the personalized recommendations of movies, tv shows and anime those should be 100% accurate 
in backend/ml-services/algorithm.py file there should be complete alogrithms and operation should be there
according to the users search history, view, like, favorite, watchlist, rating
now  improve the users.py
provide the files without comments

Critical Success Factors
1.	Multi-layered approach: Don't rely on single algorithm
2.	Dynamic weighting: Adjust based on user behavior patterns
3.	Continuous learning: Regular model updates with fresh data
4.	Context awareness: Consider time, device, location
5.	Cold start handling: Strategies for new users/items
6.	Feedback loops: Learn from user interactions immediately
Evaluation Metrics
‚Ä¢	Accuracy: RMSE, Precision@K, NDCG
‚Ä¢	Beyond accuracy: Diversity, novelty, coverage, serendipity
Key Implementation Strategy
Start with hybrid collaborative + content-based filtering, add deep learning layers, implement real-time feedback, and continuously A/B test different approaches while maintaining diversity in recommendations.



The personalized recommendation functionality is to based on the users search history, view, like, favorite, watchlist, rating should be keep traking based on that the personalized recommendations should be provided use the best approches to provide the personalized recommendations of movies, tv shows and anime those should be 100% accurate 
according to the users search history, view, like, favorite, watchlist, rating there should be an personalized movies, anime, tv-show recommendations should be provide according to the users interests

provide the updated files without comments



Create a backend/services/personalized.py file that implements an advanced personalized recommendation system for movies, TV shows, and anime. The service must:
1.	Continuously track user interactions including search history, views, likes, favorites, watchlist, and ratings.
2.	Generate highly accurate, user-specific recommendations based on these signals.
3.	Apply the best recommendation approaches (e.g., hybrid filtering, collaborative filtering, content-based filtering, sequence-aware models, embeddings, context-aware ranking) to ensure 100% relevance.
4.	Provide personalized recommendations across categories (movies, anime, TV shows) tailored precisely to each user‚Äôs interests.
5.	Be structured with production-ready, modular, and scalable code, following clean architecture and best practices.

personalized recommendation according to the users search history, view, like, favorite, watchlist, rating there should be an personalized movies, anime, tv-show recommendations should be provide according to the users interests


there are several issues and errors in the backend/services/users.py, backend/services/personalized.py solve all the issues and errors and provide the production grade code
provide the updated production grade files without comments



provide me the production grade code for support.py file no place holders use frontend url = https://cinebrain.vercel.app/ make more best production grade code
use the above smtp from the above backend/services/auth.py file



according to the above app.py file, index.html, content-card, files and below backend/services/auth.py create backend/services/support.py file which should contain the backend
Help Center, Contact Us, FAQ, Feedback, Report Issue
production grade code use the same smtp details GMAIL_USERNAME, GMAIL_APP_PASSWORD


this is my backend/services/auth.py file






1.	POST /api/support/contact - Contact form submission:
‚Ä¢	Enterprise-grade validation
‚Ä¢	Rate limiting
‚Ä¢	Async ticket creation
‚Ä¢	Correlation ID tracking
‚Ä¢	Metrics recording
2.	POST /api/support/feedback - Feedback submission:
‚Ä¢	Multi-type feedback support
‚Ä¢	Screenshot handling
‚Ä¢	Sentiment analysis ready
‚Ä¢	Auto-categorization
3.	POST /api/support/report-issue - Bug reporting:
‚Ä¢	Detailed issue tracking
‚Ä¢	Priority auto-calculation
‚Ä¢	Technical metadata capture
4.	GET /api/support/faq - FAQ retrieval:
‚Ä¢	Advanced search functionality
‚Ä¢	Category filtering
‚Ä¢	Analytics tracking
‚Ä¢	Multi-language support
5.	GET /api/support/faq/<id>/helpful - FAQ rating
6.	GET /api/support/categories - Category listing
7.	GET /api/support/help-center - Help center data
8.	GET /api/support/ticket/<ticket_id> - Ticket status
Admin Endpoints
9.	GET /api/admin/support/tickets - Ticket management
10.	POST /api/admin/support/ticket/<id>/respond - Staff responses
11.	GET /api/admin/support/feedback - Feedback review
System Endpoints
12.	GET /api/support/health - Comprehensive health check




make sure that all the support related thing also should be send and mannaged by the admin all the oparation related the above backend/services/support.py and the notifications should be send to the admin login dashboard and gmail 
and add some useful and best features in this also
provide me the updated production grade code


provide the designed CineBrain Support & Admin Testing Interface file with the bootstrap5 and tailwind css





Create a production-ready backend/services/personalized.py file that implements an advanced personalized recommendation system for movies, TV shows, and anime. The service must:
1.	Continuously track user interactions including search history, views, likes, favorites, watchlist, and ratings.
2.	Generate highly accurate, user-specific recommendations based on these signals.
3.	Apply the best recommendation approaches (hybrid filtering, collaborative filtering, content-based filtering, sequence-aware models, embeddings, context-aware ranking) to ensure maximum relevance.
4.	Provide personalized recommendations across categories (movies, anime, TV shows) tailored precisely to each user‚Äôs interests.
5.	Be structured with modular, scalable, and clean architecture for production use.
6.	Include additional useful features for user interaction (feedback, preference updates, personalization settings,Notification/Alert Settings) and integrate these properly in an updated backend/services/user.py file.
7.	Deliver the final output as two files: personalized.py and user.py, both fully updated, production-grade, and without comments.





update my production-ready backend files: backend/services/personalized.py and backend/services/user.py.
personalized.py
Implement an advanced personalized recommendation system for movies, TV shows, and anime that:
1.	Continuously tracks user interactions (search history, views, favorites, watchlist, ratings).
2.	Generates highly accurate recommendations tailored to each user using hybrid filtering, collaborative filtering, content-based filtering, sequence-aware models, embeddings, and context-aware ranking.
3.	Provides recommendations across categories (movies, anime, TV shows) based on user interests, history, and preferences.
4.	Is production-grade, modular, scalable, and follows clean architecture best practices.
5.	Dynamically updates recommendations when user preferences, watch history, or ratings change.
user.py
Implement an advanced User Service with full personalization and interaction features:
üë§ User Profile Features
‚Ä¢	Customizable profiles: upload avatar using Cloudinary free tier (fallback: auto-generated via ui-avatars), edit username & bio, theme preference (light/dark).
‚Ä¢	Activity Page: full viewing history with rewatch option, track watch streaks, total watch time.
‚Ä¢	Preferences: favorite genres, preferred languages (content + UI), region-based content prioritization.
üî• Engagement Features
‚Ä¢	Notifications (in-app + email, optional): alerts for new releases in watchlist genres, trending updates, personalized recommendations refresh.
‚Ä¢	Trending Now alerts: dynamically surface trending movies, anime, and TV shows.
‚öôÔ∏è User Settings Features
‚Ä¢	Account settings: update username, email, password, manage sessions (logout all), enable 2FA, delete account.
‚Ä¢	Preferences: theme toggle (dark/light), language selection (UI + content), region selection, default homepage option (Trending/Anime/Movies/etc).
‚Ä¢	Content & personalization: manage watchlist (bulk remove/reorder), manage favorites, clear viewing history, maturity filters, favorite genres for better recommendations.
‚Ä¢	Notifications: toggle in-app/email alerts for new releases, trending, personalized recommendations.
Requirements
‚Ä¢	Use Cloudinary free tier for avatar uploads.
‚Ä¢	Both files (personalized.py and user.py) must be production-grade, modular, scalable, and written without comments.
‚Ä¢	Ensure clean code and seamless integration between user features and personalized recommendations.
‚Ä¢	make the personlized recommendation according to the users preferrences and users intrests make this 100% accurate and other best algorithm if need combine some of the best algorithms to get 100% accurate personlized recommendation according to the users preferrences and users intrests
‚Ä¢	Final output: deliver updated personalized.py and user.py files.




provide the complete updated files with the complete issues and errors solved make each of the line in the code works well 
make the personlized recommendation according to the users preferrences and users intrests make this 100% accurate and other best algorithm if need combine some of the best algorithms to get 100% accurate personlized recommendation according to the users preferrences and users intrests

provide the updated files without comments


create backend/services/personalized.py which should have
You are an advanced recommendation system tasked with generating highly accurate, personalized recommendations for each user. Continuously analyze and learn from the user‚Äôs full spectrum of interactions, including search history, viewed items, likes, favorites, watchlist activity, and ratings.
1.	Deep Profiling: Build a dynamic profile of the user that updates in real-time based on new behavior. Identify core preferences, hidden patterns, niche interests, and evolving tastes.
2.	Multi-Algorithm Fusion: Combine the strengths of several recommendation approaches for maximal accuracy:
‚Ä¢	Collaborative Filtering (user‚Äìuser & item‚Äìitem): Find similarity clusters among users and items.
‚Ä¢	Content-Based Filtering: Match item features (genres, tags, keywords, metadata) to user history.
‚Ä¢	Matrix Factorization / Embeddings (e.g., SVD, Word2Vec, Deep learning embeddings): Capture latent factors behind user preferences.
‚Ä¢	Context-Aware Filtering: Incorporate temporal signals (time of day, recency bias), location (if applicable), and sequential behavior.
‚Ä¢	Hybrid Models: Merge different signals into a reinforced scoring/ranking mechanism.
3.	Precision & Adaptation:
‚Ä¢	Continuously balance accuracy (matching the user‚Äôs known interests) with serendipity (introducing novel but relevant options).
‚Ä¢	Factor in long-term preferences and short-term trends within the user‚Äôs behavior.
‚Ä¢	Prioritize recommendations that maximize satisfaction, engagement, and predicted rating.

Build a Netflix-level personalized recommendation system for movies, TV shows, and anime.
Continuously track user interactions (search history, views, favorites, watchlist, ratings) to update real-time profiles.
Analyze storylines, synopsis, genres, and metadata using NLP + embeddings to detect deep content similarity.
Use a hybrid model (collaborative, content-based, matrix factorization, context-aware) to generate adaptive, accurate, and unique recommendations with short justifications.




provides complete Netflix-level personalization movies, tv-show and anime recommendations according to the user search history, views, favorites, watchlist, ratings, etc.


according to the above files create backend/services/personalized.py file with the following and update user.py there should only the personlized recommendations should be there provided and also add this file in backend/app.py(main file) make sure that all the tables and database is created

Implement an advanced personalized recommendation system for movies, TV shows, and anime that:
provides complete Netflix-level personalization movies, tv-show and anime recommendations according to the user search  history, views, favorites, watchlist, ratings, etc.
1.	Continuously tracks user interactions (search history, views, favorites, watchlist, ratings) and Analyze storylines, synopsis, genres.
2.	Generates highly accurate recommendations tailored to each user using hybrid filtering, collaborative filtering, content-based filtering, sequence-aware models, embeddings, and context-aware ranking.
3.	Provides recommendations across categories (movies, anime, TV shows) based on user interests, history, and preferences and also based on the language preference.
4.	Is production-grade, modular, scalable, and follows clean architecture best practices.
5.	Dynamically updates recommendations when user preferences, watch history, or ratings change.
6. Analyze storylines, synopsis, genres
7. personalized recommendation also based on the language preference
8. add the all endpoints in the user.py file all the logics and algorithms should be in personalized.py file
9. Create a production-ready /api/personalized/ endpoint at user.py that analyzes user interactions (search history, views, favorites, watchlist, ratings) and content metadata (storylines, synopsis, genres) using hybrid recommendation techniques to deliver highly accurate, real-time personalized recommendations.
10.it should be only for my cinbrain(website brand name) users

make the backend/services/personalized.py file more better personalization movies, tv-show and anime recommendations according to the user search  history, views, favorites, watchlist, ratings and personalized recommendation also based on the language preference and Analyze storylines, synopsis, genres to get the 100% accurate results


make the backend/services/personalized.py file more better personalization movies, tv-show and anime recommendations according to the user search  history, views, favorites, watchlist, ratings and personalized recommendation also based on the language preference and Analyze storylines, synopsis, genres to get the 100% accurate results
update my production-ready /api/personalized/ endpoint at user.py that analyzes user interactions (search history, views, favorites, watchlist, ratings) and content metadata (storylines, synopsis, genres) using hybrid recommendation techniques to deliver highly accurate, real-time personalized recommendations.
it should be only for my cinbrain(website brand name) users



memorize my backend/app.py file
memorize my backend/services/alogrithms.py file
memorize my backend/services/personalized.py file
memorize my backend/services/users.py file